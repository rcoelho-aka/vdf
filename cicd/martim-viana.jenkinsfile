pipeline {
	agent any
	options {
		timeout(time: 30, unit: "MINUTES")
	}
	stages {
		stage("Setup & Clone Repo") {
			steps {
				script {
					// declare variables that are used in next steps
					env.APP_NAME = "vdf-martim-viana"
					env.DOCKER_TAG = "registry.heroku.com/${env.APP_NAME}/web"
				}
				//git branch: 'martim_viana', url: 'https://github.com/rcoelho-aka/vdf.git'
				checkout scm

			}
		}
		stage ("Maven build & test") {
			steps {
				script {
					sh 'mvn clean package'
					junit '**/target/surefire-reports/TEST-*.xml'
				}
			}
		}
		stage("Docker build") {
			steps {
				script {
					sh "docker build -t ${env.DOCKER_TAG} ."
				}
			}
		}
		stage("SonarCloud check") {
			steps {
				script {
					withCredentials([string(credentialsId: 'sonarcloud-key', variable: 'SONARCLOUD_KEY')]) {
						sh "mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.branch.name=$GIT_BRANCH"
					}
				}
			}
		}
		stage("Push to registry") {
			steps {
				script {
					withCredentials([string(credentialsId: 'heroku-key', variable: 'HEROKU_API_KEY')]) {
						sh "docker push ${env.DOCKER_TAG}"
					}
				}
			}
		}
		stage ('Input') {
            when {
                not {
                    triggeredBy("SCMTrigger")
                }
            }
            steps {
                input message: 'Do you want to deploy?(y/n)', ok: 'y'
            }
        }
		stage("Deploy") {
			when {
				not {
					triggeredBy("SCMTrigger")
				}
			}
			steps {
				script {
					withCredentials([string(credentialsId: 'heroku-key', variable: 'HEROKU_API_KEY')]) {
						sh "heroku container:login"
						sh "heroku container:release web -a ${env.APP_NAME}"
					}
				}
			}
		}
	}
}