pipeline {
    
    agent any
    
    stages {
        stage('Setup & Clone Repo') {
            steps {
                cleanWs()
                script {
                    env.APP_NAME = "vdf-joao-quintaneiro"                    
                    env.DOCKER_TAG = "registry.heroku.com/${env.APP_NAME}/web"
                    checkout scm
                    
                }
            }
        }
        stage('Maven build & test') { 
            steps {
                    
                    sh "mvn clean package"                        
                    junit '**/target/surefire-reports/TEST-*.xml'                    
                        
                    
            }
        }
        stage('Docker build') {  
            steps{
                    sh "docker build -t ${env.DOCKER_TAG} ."                
            }
        } 
        stage('Push to registry') {  
            steps{
                withCredentials([string(credentialsId: 'heroku-key', variable: 'HEROKU_API_KEY')]){
                    sh("heroku container:login")
                    sh("docker push ${env.DOCKER_TAG}")

                }
            }
        }
        stage ('User Input') {
                        when {
                            not {
                                triggeredBy ("DeployOption")
                            }
                        }
                        steps {
                            input message: 'Deploy?', ok: 'Yes'
                        }
                    }
        stage('Deploy') {
            when {
                not {
                    triggeredBy ("DeployOption")
                    }
            } 
            steps{
                withCredentials([string(credentialsId: 'heroku-key', variable: 'HEROKU_API_KEY')]){
                    sh("heroku container:release web -a ${env.APP_NAME}")
                }
            }
        }

        stage('SonarCloud') {
            steps{
                withCredentials([string(credentialsId:'sonarcloud-key', variable: 'SONAR_TOKEN')]){
                    sh "mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.branch.name=$GIT_BRANCH"
                }
            }
    }
    }
}