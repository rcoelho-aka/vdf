pipeline {
    agent any

    stages {
        stage('Setup & Clone Repo') {
            steps {
                script {
                    // declare variables that are used in next steps
                    env.APP_NAME = "vdf-andre-matias"
                    env.DOCKER_TAG = "registry.heroku.com/${env.APP_NAME}/web"
                }
                echo "clone"
                //git branch: 'andre-matias', url: 'https://github.com/rcoelho-aka/vdf'
                checkout scm
            }
        }

        stage('Maven build & test') {
            steps{
                echo "mvn build and test"
                sh 'mvn clean package'
                junit '**/target/surefire-reports/TEST-*.xml'
                withCredentials([string(credentialsId: 'sonarcloud-key', variable: 'SONAR_TOKEN')]) {
                    sh 'mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.branch.name=$GIT_BRANCH'
                }
            }
        }

        stage('Docker build') {
            steps{
                echo "docker build"
                sh "docker build -t ${env.DOCKER_TAG} ."
                sh "docker build -t ${env.DOCKER_TAG} ."
            }
            
        }

        stage('Push to registry') {
            steps{
                echo "push registryt"
                withCredentials([string(credentialsId: 'heroku-key', variable: 'HEROKU_API_KEY')]) {
                    sh 'heroku container:login'
                    sh "docker push ${env.DOCKER_TAG}"
                }
            }
            
        }
        stage ('Approve') {
            when {
                not {
                    triggeredBy ("SCMTrigger")
                }
            }
            steps {
                input message: 'Deploy?', ok: 'Lezzgo'
            }
        }
        stage ('Deploy') {
            when {
                not {
                    triggeredBy ("SCMTrigger")
                }
            }
            steps {
                script {
                    def approved = false
                    stage("Deployment Solution"){
                        stage ("Approval for Deployment"){
                        try{
                            approval.requestInputApproval '2', 'HOURS', "Do you want to deploy??", 'Please confirm.', "Deployment..."
                            approved = true
                            }catch(e){
                                log.warning "Approval was not given for deployment..."
                            }
                            if (approved){
                                withCredentials([string(credentialsId: 'heroku-key', variable: 'HEROKU_API_KEY')]) {
                                    sh "heroku container:login"
                                    sh "heroku container:release web -a ${env.APP_NAME}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
